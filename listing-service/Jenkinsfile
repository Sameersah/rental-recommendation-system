pipeline {
  agent any
  environment {
    APP_PORT = '8010'
    DOCKER_IMAGE = 'rental-recommender/listing-service:latest'
  }

  stage('Clone Repository') {
    steps {
      // Clone the repository
      def containerId = sh(script: "docker ps -aq --filter name=listing-service-container", returnStdout: true).trim()
      if (containerId) {
        sh "docker stop ${containerId}"
        sh "docker rm ${containerId}"
      }
    }
  }
  stage('Clone Repository') {
    steps {
      // Clone the repository
      checkout scm
    }
  }
  stage('Build Docker Image') {
    steps {
      // Navigate to listing-service and build the Docker image
      dir('listing-service') {
        sh 'docker build -t $DOCKER_IMAGE .'
      }
    }
  }
  stage('Stop Existing Container') {
    steps {
      // Stop any running container of the same image
      script {
        def containerId = sh(script: "docker ps -q --filter ancestor=$DOCKER_IMAGE", returnStdout: true).trim()
        if (containerId) {
          sh "docker stop $containerId && docker rm $containerId"
        }
      }
    }
  }
  stage('Run Docker Container') {
    steps {
      // Run the Docker container
      sh ''
      '
      docker run - d\ -
        p $APP_PORT: $APP_PORT\
        --name listing - service - container\
      $DOCKER_IMAGE
        ''
      '
    }
  }
}
post {
  success {
    echo 'Pipeline completed successfully!'
  }
  failure {
    echo 'Pipeline failed.'
  }
}
}
