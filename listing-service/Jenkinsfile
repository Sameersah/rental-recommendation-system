pipeline {
    agent any
    environment {
        APP_PORT = '8010'
        DOCKER_IMAGE = 'rental-recommender/listing-service:latest'
        CONTAINER_NAME = 'listing-service-container'
    }
    stages {
        stage('Clone Repository') {
            steps {
                checkout scm
            }
        }

                stage('Install Dependencies') {
            steps {
                dir('listing-service') {
                    sh '''
                    python -m pip install --upgrade pip
                    pip install -r requirements.txt
                    '''
                }
            }
        }
        stage('Run Tests') {
            steps {
                dir('listing-service') {
                    sh '''
                    export PATH=$PATH:/var/lib/jenkins/.local/bin
                    pytest --version
                    pytest test_app.py --maxfail=5 --disable-warnings --verbose
                '''
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                dir('listing-service') {
                    sh '''
                    docker build -t $DOCKER_IMAGE .
                    '''
                }
            }
        }
        stage('Stop Existing Container') {
            steps {
                script {
                   sh '''
                    CONTAINER_ID=$(docker ps -aq --filter name=listing-service-container)
                    if [ -n "$CONTAINER_ID" ]; then
                        docker stop $CONTAINER_ID || true
                        docker rm $CONTAINER_ID || true
                    else
                        echo "No container found with name listing-service-container"
                    fi
                '''
                }
            }
        }
        stage('Run Docker Container') {
            steps {
                sh '''
                docker run -d \
                    -p $APP_PORT:$APP_PORT \
                    --name $CONTAINER_NAME \
                    $DOCKER_IMAGE
                '''
            }
        }
    }
    post {
        success {
            echo 'Pipeline completed successfully!'
        }
        failure {
            echo 'Pipeline failed.'
        }
    }
}
